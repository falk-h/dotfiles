#!/bin/zsh
# Use vim cli mode
bindkey -v
bindkey '^P' up-history
bindkey '^N' down-history

# Backspace and ^h working even after returning from command mode
bindkey '^?' backward-delete-char
bindkey '^H' backward-delete-char

# ctrl-w and ctrl-backspace delete the previous word in insert mode.
bindkey '^W'  backward-kill-word
#bindkey '^\b' backward-kill-word

# ctrl-r starts searching history backward
bindkey '^R' history-incremental-search-backward

# Make arrow keys and jk search history
bindkey -a 'j' down-line-or-search
bindkey -a 'k' up-line-or-search
bindkey -a "^[[B" down-line-or-search
bindkey -a "^[[A" up-line-or-search
bindkey "^[[B" down-line-or-search
bindkey "^[[A" up-line-or-search

# Eliminate the wait time after pressing escape
KEYTIMEOUT=1

# Toggle stopping programs with ^Z
fancy-ctrl-z () {
    if [[ $#BUFFER -eq 0 ]]; then
        BUFFER="fg"
        zle accept-line -w
    else
        zle push-input -w
        zle clear-screen -w
    fi
}
zle -N fancy-ctrl-z
bindkey '^Z' fancy-ctrl-z
bindkey -a '^Z' fancy-ctrl-z

# Aliases
alias cb='popd 1> /dev/null' # silent popd
alias :q=exit
alias hibernate='sudo systemctl hibernate'
alias cal='cal -m' # cal with monday as the week's first day
alias bc='bc -lq' # bc with floats, without header
alias -g dd='dd status=progress'
alias rm='rm -I'
alias vim="$VISUAL"
alias gdb='gdb -q' # Hide the license header
alias man=vim_man # Read manpages in Vim. Defined further down.

function dotfiles() {
    git --git-dir="$HOME/.dotfiles/" --work-tree="$HOME" $@
}

# Test if a string could be a section of manpages
function is_man_section() {
    [[ "$1" =~ '^[0-9][a-z0-9]*?$' ]]
}

# Test if a string start with a dash
function is_flag() {
    [[ "$1" =~ '^-' ]]
}

# Look up manpages in Vim, or fallback to man if the arguments don't look like
# a regular `man [section] [page]` invocation.
function vim_man() {
    if (( $# == 1 )) && ! is_flag "$1"; then
        vim -c "Man $1" -c 'only'
    elif (( $# == 2 )) && is_man_section "$1" && ! is_flag "$2"; then
        vim -c "Man $1 $2" -c 'only'
    else
        man "$@"
    fi
}

# mkdir and cd
function mcdir()
{
    mkdir -p -- "$1" &&
    cd -P -- "$1"
}

# Base16 Shell
BASE16_SHELL="$HOME/.dotfiles-submodules/base16-shell/"
[ -n "$PS1" ] \
    && [ -s "$BASE16_SHELL/profile_helper.sh" ] \
    && eval "$("$BASE16_SHELL/profile_helper.sh")"

# Set prompt color according to host
# Also affects the color of the mode indicator
hostname="$(uname -n)"
prompt_color=blue
case "$hostname" in
    dt|lt) prompt_color=blue;;
    pi)    prompt_color=green;;
esac
zstyle ':prompt:grml:*:items:user' pre "%B%F{$prompt_color}"

# Function to add mode to the right prompt
function zle-line-init zle-keymap-select {
    RPS1="${${KEYMAP/vicmd/%B%F{9\}NORMAL%f%b}/(main|viins)/%F{$prompt_color\}INSERT%f}"
    # RPS2="$RPS1"
    zle reset-prompt
}
zle -N zle-line-init
zle -N zle-keymap-select

# Syntax highlighting, autosuggestions, and fzf
plugins=(
    ~/.dotfiles-submodules/zsh-autosuggestions/zsh-autosuggestions.zsh
    ~/.dotfiles-submodules/fzf/shell/key-bindings.zsh
    ~/.dotfiles-submodules/fzf/shell/completion.zsh
    ~/.dotfiles-submodules/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
)
for plugin in $plugins; do
    [ -f "$plugin" ] && source "$plugin" || echo "Missing $plugin"
done
