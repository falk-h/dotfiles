#!/bin/zsh
# Use vim cli mode
bindkey -v
bindkey '^P' up-history
bindkey '^N' down-history

# Backspace working even after returning from command mode
bindkey '^?' backward-delete-char

# ctrl-w and ctrl-backspace delete the previous word in insert mode
bindkey '^W'  backward-kill-word
bindkey '^H' backward-delete-word

# ctrl-delete
bindkey "\e[3;5~" kill-word

# ctrl-r starts searching history backward
bindkey '^R' fzf-history-widget
# Search history in normal mode
bindkey -a '/' fzf-history-widget
bindkey -a '?' fzf-history-widget

# Redo like in Vim
bindkey -a '^R' redo

# Make arrow keys and jk search history
bindkey -a 'j' down-line-or-search
bindkey -a 'k' up-line-or-search
bindkey -a "^[[B" down-line-or-search
bindkey -a "^[[A" up-line-or-search
bindkey "^[[B" down-line-or-search
bindkey "^[[A" up-line-or-search

# Autocorrect word with &
bindkey -a '&' spell-word

# Look up manpages with K
bindkey -a 'K' run-help

# vim-surround emulation
autoload -Uz surround
zle -N delete-surround surround
zle -N add-surround surround
zle -N change-surround surround
bindkey -a cs change-surround
bindkey -a ds delete-surround
bindkey -a ys add-surround
bindkey -M visual S add-surround

# Make Y behave sensibly
bindkey -a 'Y' vi-yank-eol

# Tab backwards in the completion menu
bindkey '^[[Z' reverse-menu-complete

function incr {
    zle -f vichange
    do_increment ${NUMERIC:-1}
}

function decr {
    zle -f vichange
    do_increment -${NUMERIC:-1}
}

zle -N incr
bindkey -a "^A" incr
zle -N decr
bindkey -a "^X" decr

function do_increment {
    typeset -i cur_start=$CURSOR
    CURSOR+=1

    # Find first number to the right of the cursor
    until [[ $BUFFER[$CURSOR] =~ [0-9] ]] {
        zle -M $CURSOR
        if [[ $CURSOR -ge ${#BUFFER} ]] {
            # Didn't find a number. Abort!
            CURSOR=$cur_start
            return 0
        }
        CURSOR+=1
    }

    # Continue until we're just past it
    while [[ $BUFFER[$CURSOR+1] =~ [0-9] && $CURSOR -le ${#BUFFER} ]] {
        CURSOR+=1
    }

    if [[ $LBUFFER =~ -?[0-9]+$ ]] {
        typeset -i num=$MATCH
    } else {
        # Didn't find a number. Abort!
        CURSOR=$cur_start
        return 0
    }

    num_len=${#num}
    num+=${1:-1} # Increment by $1, or 1 as a default increment
    LBUFFER=${LBUFFER:0:-$num_len}$num
    CURSOR+=-1 # Adjust the cursor to be at the last digit of the number
}

# ctrl-backspace in FZF
export FZF_DEFAULT_OPTS='--bind=ctrl-h:backward-kill-word'

# Highlight the visual selection with a grey background
zle_highlight=(region:bg=239)

# Assume dvorak layout for spelling corrections
setopt dvorak

# Make completion menu smaller
setopt list_packed

# Use OS locking when writing to the history file. Might have better
# performance, but might also not work.
setopt hist_fcntl_lock

# Enable shorthand for loops
setopt short_loops

# ctrl-s will no longer freeze the terminal. From grml-zsh-config.
stty erase "^?"

# Eliminate the wait time after pressing escape
KEYTIMEOUT=1

# Increase history size (default was 5000)
HISTSIZE=100000

# Toggle stopping programs with ^Z
function fancy_ctrl_z {
    if [[ $#BUFFER -eq 0 ]]; then
        BUFFER="fg"
        zle accept-line -w
    else
        zle push-input -w
        zle clear-screen -w
    fi
}
zle -N fancy_ctrl_z
bindkey '^Z' fancy_ctrl_z
bindkey -a '^Z' fancy_ctrl_z

# Aliases
alias cb='popd 1> /dev/null' # silent popd
alias :q=exit
alias hibernate='sudo systemctl hibernate'
alias cal='cal -m' # cal with monday as the week's first day
alias bc='bc -lq' # bc with floats, without header
alias -g dd='dd status=progress'
alias rm='rm -I'
alias vim="$VISUAL"
alias vi="$VISUAL"
if [[ "$VISUAL" =~ "vim" ]]; then
    alias vimdiff="$VISUAL -d"
fi
alias gdb='gdb -q' # Hide the license header
alias rgdb='rust-gdb -q' # Hide the license header
alias cgdb='cuda-gdb -q' # Hide the license header
if whence nvim &> /dev/null; then
    alias man='MANPAGER="nvim +Man!" man'
fi

function dotfiles {
    git --git-dir="$HOME/.dotfiles/" --work-tree="$HOME" $@
}

function merge_main {
    head=$(< ~/.dotfiles/HEAD)
    current_branch=${head##*/}
    if [[ $current_branch = main ]]; then
        echo "On branch main"
    else
        dotfiles switch main \
            && dotfiles pull \
            && dotfiles switch "$current_branch" \
            && dotfiles merge main --no-edit
    fi
}

function g {
    if [[ $# -eq 0 ]]; then
        gdb
        return
    fi

    local prg="$1"
    shift

    if ! [[ -f "$prg" ]]; then
        echo "$prg: No such file" 1>&2
        return 1
    fi

    gdb "$prg" -ex "run $*"
}

# mkdir and cd
function mcdir {
    mkdir -p -- "$1" &&
    cd -P -- "$1"
}

# just type '...' to get '../..'
function rationalise-dot {
    local MATCH
    if [[ $LBUFFER =~ '(^|/| |	|'$'\n''|\||;|&)\.\.$' ]]; then
        LBUFFER+=/
        zle self-insert
        zle self-insert
    else
        zle self-insert
    fi
}
zle -N rationalise-dot
bindkey . rationalise-dot
# without this, typing a . aborts incremental history search
bindkey -M isearch . self-insert

# Make X applications work in WSL 2
if [[ $(< /proc/version) =~ microsoft ]] {
    wsl=1
    export DISPLAY=$(awk '/nameserver / {print $2; exit}' /etc/resolv.conf 2>/dev/null):0
    export LIBGL_ALWAYS_INDIRECT=1
    dbus_status=$(service dbus status)
    if [[ $dbus_status = *"is not running"* ]] {
      sudo service dbus --full-restart
    }
}

# Set prompt color according to host
# Also affects the color of the mode indicator
hostname="$(uname -n)"
prompt_color=blue
case "$hostname" {
    dt|lt) prompt_color=blue;;
    pi)    prompt_color=green;;
    tv)    prompt_color=yellow;;
}
zstyle ':prompt:grml:*:items:user' pre "%B%F{$prompt_color}"

# Array of .env files that have already been sourced
typeset -a DOTENV_SOURCED=()
function dotenv {
    typeset -r DOTENV_FILE='.env'
    typeset file="$PWD/$DOTENV_FILE"
    if [[ -f "$file" && ! ("$DOTENV_SOURCED[(Ie)$file]") ]] {
        echo -n "Source $DOTENV_FILE? [Y/n/i] "
        read -k 1 answer
        [[ "$answer" != $'\n' ]] && echo
        case "$answer" {
            [yY])
                setopt localoptions allexport
                source "$file"
                ;;
            [iI]) ;; # Continue and pretend that we've already sourced the file
            [nN]) return ;;
            *) dotenv ;; # Ask again on invalid answer
        }
        DOTENV_SOURCED+=("$file")
    }
}
autoload -U add-zsh-hook
add-zsh-hook chpwd dotenv

# Prompt
prompt off
setopt prompt_subst
prompt_mode='%(3V.%U.)'
prompt_user="%F{$prompt_color}%n%f%b"
prompt_separator="%B@%b"
prompt_host='%m'
prompt_jobs='%(1j.%F{green}%j%f .)'
prompt_level='%(2L.%F{yellow}$((SHLVL - 1))%f .)'
prompt_path='%(2V.:%B%2v%b.)'
prompt_vcs='${vcs_info_msg_0_}'
prompt_signal='%(?..%F{red}%v%f )'
prompt_char='%B%(!.#.>)%b'
PS1="$prompt_signal$prompt_level$prompt_jobs$prompt_mode$prompt_user$prompt_separator$prompt_host$prompt_path$prompt_vcs%u$prompt_char"
PS2='%_%B>%b'
PS3='?%B#%b'
PS4='+%N:%i:%_%B>%b'
RPS2='%^'

function precmd {
    local exitstatus=$?
    setopt localoptions noxtrace
    psvar=()
    psvar[1]=$signals[$exitstatus-127] # Get signal name
    [[ -z $psvar[1] ]] && psvar[1]=$exitstatus # Fall back to signal number
    [[ $PWD != ~ ]] && psvar[2]="$(make_path)" # Print path when not in ~
    vcs_info # Set up VCS info in prompt
}

function update_mode_indicator {
    case "$KEYMAP" in
        vicmd) psvar[3]=1;;
        main)  psvar[3]=();;
        *) RPS1='';;
    esac
    zle reset-prompt
}
zle -N zle-line-init update_mode_indicator
zle -N zle-keymap-select update_mode_indicator

# Returns the path to the current working directory with all the parts of the
# path abbreviated.
function make_path {
    [[ $PWD == ~ ]] && echo '~' && return
    [[ $PWD == / ]] && echo '/' && return
    typeset ret=''
    typeset -a directories=("${(@s./.)PWD/$HOME/~}")
    [[ $directories[1] != '~' ]] && ret+=/
    last_dir=$directories[-1]
    for dir in $directories[1,-2]; {
        ret+=$dir[1]
        [[ $dir[1] == . ]] && ret+=$dir[2]
        ret+=/
    }
    echo ${ret}${last_dir}
}

zstyle ':vcs_info:*' formats " %c[%f%F{$prompt_color}%b%f%u]%f" "zsh: %r"
zstyle ':vcs_info:*' actionformats " %c[%f%F{$prompt_color}%b%f|%F{red}%a%f%u]%f" "zsh: %r"
zstyle ':vcs_info:(sv[nk]|bzr):*' branchformat "%b%F{red}:%F{yellow}%r"
# Change to check-for-staged-changes if this is slow in large repos
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' stagedstr "%F{green}"
zstyle ':vcs_info:*' unstagedstr "%F{red}"

# Plugins
source ~/.dotfiles-submodules/zsh-autosuggestions/zsh-autosuggestions.zsh
source ~/.dotfiles-submodules/fzf/shell/key-bindings.zsh
source ~/.dotfiles-submodules/fzf/shell/completion.zsh
source ~/.dotfiles-submodules/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
if ! [[ -n "$wsl" ]] {
    source ~/.dotfiles-submodules/zsh-notify/notify.plugin.zsh
}

# ^F to always trigger FZF (context-aware)
export FZF_COMPLETION_TRIGGER=''
bindkey '^F' fzf-completion
bindkey -a '^F' fzf-completion
bindkey '^I' $fzf_default_completion

zstyle ':notify:*' success-icon "$HOME/.dotfiles-extra/pictures/Pog.png"
zstyle ':notify:*' error-icon "$HOME/.dotfiles-extra/pictures/Nog.png"
zstyle ':notify:*' command-complete-timeout 15
zstyle ':notify:*' expire-time 10000
zstyle ':notify:*' enable-on-ssh yes
zstyle ':notify:*' success-title 'Command succeeded after #{time_elapsed}'
zstyle ':notify:*' error-title 'Command failed after #{time_elapsed}'

export DOTNET_CLI_TELEMETRY_OPTOUT=1
