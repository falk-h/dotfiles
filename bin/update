#!/bin/env python3
"""Updates packages from various package managers. See the calls to do_update()
at the end of the file."""

import signal
from shutil import which
from typing import Optional, List, Final, Callable
import subprocess as sp
from argparse import ArgumentParser, Namespace
from dataclasses import dataclass
import sys

MIN_VERSION = (3, 8)
if sys.version_info < MIN_VERSION:
    min_version: str = f'{MIN_VERSION[0]}.{MIN_VERSION[1]}'
    actual_version: str = f'{sys.version_info[0]}.{sys.version_info[1]}'
    sys.exit(f"Need Python {min_version}! Have {actual_version}")

# Exit gracefully on keyboard interrupt
signal.signal(signal.SIGINT, signal.SIG_DFL)


@dataclass
class Format:
    """String constants for styling terminal output"""
    # pylint: disable=invalid-name
    BOLD: Final[str] = '\033[1m'
    RESET: Final[str] = '\033[0m'
    RED: Final[str] = '\033[31m'


def print_error(*args: str, end: str = '\n') -> None:
    """Concatenates arguments and prints them in bold red text"""
    print_bold(Format.RED, *args, end=end)


def print_bold(*args: str, end: str = '\n') -> None:
    """Concatenates arguments and prints them in bold"""
    print(Format.BOLD, *args, Format.RESET, sep='', end=end)


@dataclass
class Update:
    """Defines a method to update some set of packages"""
    command: List[str]
    as_root: bool
    description: str
    fallback: Optional['Update']
    extra_checks: Callable[[], bool]
    # TODO: actually implement calling custom functions
    custom_function: Callable[[], bool]


def program_exists(update: Update) -> bool:
    """Checks whether the program that is to be run exists"""
    return which(update.command[0]) is not None and update.extra_checks()  # type: ignore


def check(update: Update) -> bool:
    """Checks that the program exists and that any additional checks pass"""
    if not program_exists(update):
        print_error(f'Program `{update.command[0]}` not found')
        return False

    return update.extra_checks()  # type: ignore


def run(update: Update) -> None:
    """Runs an update, possibly falling back to a fallback update"""
    if not check(update):
        if update.fallback is not None:
            run(update.fallback)
    else:
        try:
            execute(update)
        except sp.CalledProcessError as err:
            command_str: str = ' '.join(update.command)
            print_error(
                f'Command `{command_str}` failed with return code {err.returncode}')


def execute(update: Update) -> None:
    """Executes an argument's command"""
    command = update.command
    if update.as_root:
        command.insert(0, 'sudo')
    print_bold(f'Updating {update.description}...')
    sp.run(command, check=True)


# pylint: disable=too-many-arguments
def do_update(
    command: str,
    description: str,
    as_root: bool = False,
    fallback: Optional['Update'] = None,
    extra_checks: Optional[Callable[[], bool]] = None,
    custom_function: Optional[Callable[[], bool]] = None
):
    """Creates and runs an update"""
    if len(command) == 0:
        raise ValueError('Empty command')

    extra_checks = extra_checks if extra_checks is not None else lambda: True
    custom_function = custom_function if custom_function is not None else lambda: True
    update = Update(command.split(' '), as_root, description, fallback,
                    extra_checks, custom_function)

    run(update)


@dataclass(frozen=True)
class Options:
    """Represents the parsed command line options"""
    extra: bool
    git: bool


def parse_args() -> Options:
    """Parses command line arguments"""
    parser: ArgumentParser = ArgumentParser(description='Update packages.')
    parser.add_argument('-e', '--extra', action='store_true',
                        default=False, help='update all packages')
    parser.add_argument('-g', '--git', action='store_true', default=False)
    parsed: Namespace = parser.parse_args(sys.argv[1:])
    return Options(extra=parsed.extra, git=parsed.git)


options: Options = parse_args()

# TODO: add npm -g outdated --parseable --depth=0 | cut -d: -f2 | xargs -r -n1 sudo npm -g install
# TODO: update PIP packages
do_update('pacman -Syu', 'pacman packages', as_root=True)
do_update('yay -Syua --needed' +
          (' --devel' if options.git else ''), 'aur packages')

if options.extra:
    do_update('pacman -Fy', 'pacman file database', as_root=True)
    do_update('nvim +:PlugUpdate +:qa', 'neovim plugins')
    do_update('nvim +:CocUpdate +:qa', 'neovim coc extensions')
    do_update('flatpak update -y', 'global flatpak applications', as_root=True)
    do_update('flatpak update --user -y', 'user flatpak applications')
    do_update('cargo install-update --all' +
              (' --git' if options.git else ''), 'cargo crates')
    do_update('rustup update', 'rust toolchains')
